/* tslint:disable */
/* eslint-disable */
/**
 * Authentication Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthorizeRequest200Response
 */
export interface AuthorizeRequest200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeRequest200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthorizeRequest401Response
 */
export interface AuthorizeRequest401Response {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeRequest401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface OpenIdAuthTokenRequest200Response
 */
export interface OpenIdAuthTokenRequest200Response {
    /**
     * 
     * @type {string}
     * @memberof OpenIdAuthTokenRequest200Response
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof OpenIdAuthTokenRequest200Response
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface OpenIdAuthTokenRequest401Response
 */
export interface OpenIdAuthTokenRequest401Response {
    /**
     * 
     * @type {string}
     * @memberof OpenIdAuthTokenRequest401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface OpenIdAuthTokenRequestRequest
 */
export interface OpenIdAuthTokenRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenIdAuthTokenRequestRequest
     */
    'loginCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIdAuthTokenRequestRequest
     */
    'appContext'?: string;
}
/**
 * 
 * @export
 * @interface OpenIdUserInfoRequest200Response
 */
export interface OpenIdUserInfoRequest200Response {
    /**
     * 
     * @type {string}
     * @memberof OpenIdUserInfoRequest200Response
     */
    'sub'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIdUserInfoRequest200Response
     */
    'inum'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIdUserInfoRequest200Response
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface OpenIdUserInfoRequestRequest
 */
export interface OpenIdUserInfoRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenIdUserInfoRequestRequest
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIdUserInfoRequestRequest
     */
    'appContext'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {string} [xAuthorizationProvider] 
         * @param {string} [xAuthorizationContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeRequest: async (authorization?: string, xAuthorizationProvider?: string, xAuthorizationContext?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xAuthorizationProvider != null) {
                localVarHeaderParameter['X-Authorization-Provider'] = String(xAuthorizationProvider);
            }

            if (xAuthorizationContext != null) {
                localVarHeaderParameter['X-Authorization-Context'] = String(xAuthorizationContext);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdAuthTokenRequestRequest} openIdAuthTokenRequestRequest Retrieve the authentication token from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdAuthTokenRequest: async (provider: string, openIdAuthTokenRequestRequest: OpenIdAuthTokenRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdAuthTokenRequest', 'provider', provider)
            // verify required parameter 'openIdAuthTokenRequestRequest' is not null or undefined
            assertParamExists('openIdAuthTokenRequest', 'openIdAuthTokenRequestRequest', openIdAuthTokenRequestRequest)
            const localVarPath = `/auth/openid/{provider}/auth-token-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(openIdAuthTokenRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} code Login code
         * @param {string} state Login state string
         * @param {string} [acrValues] 
         * @param {string} [scope] 
         * @param {string} [sessionState] 
         * @param {string} [sid] 
         * @param {string} [nonce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdAuthenticateResponse: async (provider: string, code: string, state: string, acrValues?: string, scope?: string, sessionState?: string, sid?: string, nonce?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdAuthenticateResponse', 'provider', provider)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('openIdAuthenticateResponse', 'code', code)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('openIdAuthenticateResponse', 'state', state)
            const localVarPath = `/auth/openid/{provider}/authenticate-response`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (acrValues !== undefined) {
                localVarQueryParameter['acr_values'] = acrValues;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (sessionState !== undefined) {
                localVarQueryParameter['session_state'] = sessionState;
            }

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }

            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLoginRequest: async (provider: string, appContext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdLoginRequest', 'provider', provider)
            // verify required parameter 'appContext' is not null or undefined
            assertParamExists('openIdLoginRequest', 'appContext', appContext)
            const localVarPath = `/auth/openid/{provider}/login-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appContext !== undefined) {
                localVarQueryParameter['appContext'] = appContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [idToken] id_token value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLogoutRequest: async (provider: string, appContext: string, idToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdLogoutRequest', 'provider', provider)
            // verify required parameter 'appContext' is not null or undefined
            assertParamExists('openIdLogoutRequest', 'appContext', appContext)
            const localVarPath = `/auth/openid/{provider}/logout-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appContext !== undefined) {
                localVarQueryParameter['appContext'] = appContext;
            }

            if (idToken !== undefined) {
                localVarQueryParameter['idToken'] = idToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} [state] Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLogoutResponse: async (provider: string, state?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdLogoutResponse', 'provider', provider)
            const localVarPath = `/auth/openid/{provider}/logout-response`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdUserInfoRequest: async (provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('openIdUserInfoRequest', 'provider', provider)
            // verify required parameter 'openIdUserInfoRequestRequest' is not null or undefined
            assertParamExists('openIdUserInfoRequest', 'openIdUserInfoRequestRequest', openIdUserInfoRequestRequest)
            const localVarPath = `/auth/openid/{provider}/user-info-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(openIdUserInfoRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2AuthenticateResponse: async (provider: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2AuthenticateResponse', 'provider', provider)
            const localVarPath = `/auth/saml2/{provider}/authenticate-response`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [provider2] Auth provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LoginRequest: async (provider: string, appContext: string, provider2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2LoginRequest', 'provider', provider)
            // verify required parameter 'appContext' is not null or undefined
            assertParamExists('saml2LoginRequest', 'appContext', appContext)
            const localVarPath = `/auth/saml2/{provider}/login-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appContext !== undefined) {
                localVarQueryParameter['appContext'] = appContext;
            }

            if (provider2 !== undefined) {
                localVarQueryParameter['provider'] = provider2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutRequest: async (provider: string, appContext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2LogoutRequest', 'provider', provider)
            // verify required parameter 'appContext' is not null or undefined
            assertParamExists('saml2LogoutRequest', 'appContext', appContext)
            const localVarPath = `/auth/saml2/{provider}/logout-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appContext !== undefined) {
                localVarQueryParameter['appContext'] = appContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutResponse: async (provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2LogoutResponse', 'provider', provider)
            // verify required parameter 'sAMLResponse' is not null or undefined
            assertParamExists('saml2LogoutResponse', 'sAMLResponse', sAMLResponse)
            // verify required parameter 'relayState' is not null or undefined
            assertParamExists('saml2LogoutResponse', 'relayState', relayState)
            // verify required parameter 'sigAlg' is not null or undefined
            assertParamExists('saml2LogoutResponse', 'sigAlg', sigAlg)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('saml2LogoutResponse', 'signature', signature)
            const localVarPath = `/auth/saml2/{provider}/logout-response`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sAMLResponse !== undefined) {
                localVarQueryParameter['SAMLResponse'] = sAMLResponse;
            }

            if (relayState !== undefined) {
                localVarQueryParameter['RelayState'] = relayState;
            }

            if (sigAlg !== undefined) {
                localVarQueryParameter['SigAlg'] = sigAlg;
            }

            if (signature !== undefined) {
                localVarQueryParameter['Signature'] = signature;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutResponse_1: async (provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2LogoutResponse_1', 'provider', provider)
            // verify required parameter 'sAMLResponse' is not null or undefined
            assertParamExists('saml2LogoutResponse_1', 'sAMLResponse', sAMLResponse)
            // verify required parameter 'relayState' is not null or undefined
            assertParamExists('saml2LogoutResponse_1', 'relayState', relayState)
            // verify required parameter 'sigAlg' is not null or undefined
            assertParamExists('saml2LogoutResponse_1', 'sigAlg', sigAlg)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('saml2LogoutResponse_1', 'signature', signature)
            const localVarPath = `/auth/saml2/{provider}/logout`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sAMLResponse !== undefined) {
                localVarQueryParameter['SAMLResponse'] = sAMLResponse;
            }

            if (relayState !== undefined) {
                localVarQueryParameter['RelayState'] = relayState;
            }

            if (sigAlg !== undefined) {
                localVarQueryParameter['SigAlg'] = sigAlg;
            }

            if (signature !== undefined) {
                localVarQueryParameter['Signature'] = signature;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2UserInfoRequest: async (provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('saml2UserInfoRequest', 'provider', provider)
            // verify required parameter 'openIdUserInfoRequestRequest' is not null or undefined
            assertParamExists('saml2UserInfoRequest', 'openIdUserInfoRequestRequest', openIdUserInfoRequestRequest)
            const localVarPath = `/auth/saml2/{provider}/user-info-request`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(openIdUserInfoRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swagger: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swagger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {string} [xAuthorizationProvider] 
         * @param {string} [xAuthorizationContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeRequest(authorization?: string, xAuthorizationProvider?: string, xAuthorizationContext?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizeRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeRequest(authorization, xAuthorizationProvider, xAuthorizationContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdAuthTokenRequestRequest} openIdAuthTokenRequestRequest Retrieve the authentication token from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdAuthTokenRequest(provider: string, openIdAuthTokenRequestRequest: OpenIdAuthTokenRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenIdAuthTokenRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdAuthTokenRequest(provider, openIdAuthTokenRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} code Login code
         * @param {string} state Login state string
         * @param {string} [acrValues] 
         * @param {string} [scope] 
         * @param {string} [sessionState] 
         * @param {string} [sid] 
         * @param {string} [nonce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdAuthenticateResponse(provider: string, code: string, state: string, acrValues?: string, scope?: string, sessionState?: string, sid?: string, nonce?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdAuthenticateResponse(provider, code, state, acrValues, scope, sessionState, sid, nonce, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdLoginRequest(provider: string, appContext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdLoginRequest(provider, appContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [idToken] id_token value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdLogoutRequest(provider: string, appContext: string, idToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdLogoutRequest(provider, appContext, idToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} [state] Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdLogoutResponse(provider: string, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdLogoutResponse(provider, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIdUserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenIdUserInfoRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIdUserInfoRequest(provider, openIdUserInfoRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async root(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.root(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2AuthenticateResponse(provider: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2AuthenticateResponse(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [provider2] Auth provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2LoginRequest(provider: string, appContext: string, provider2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2LoginRequest(provider, appContext, provider2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2LogoutRequest(provider: string, appContext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2LogoutRequest(provider, appContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2LogoutResponse(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2LogoutResponse(provider, sAMLResponse, relayState, sigAlg, signature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2LogoutResponse_1(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2LogoutResponse_1(provider, sAMLResponse, relayState, sigAlg, signature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saml2UserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saml2UserInfoRequest(provider, openIdUserInfoRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swagger(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swagger(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {string} [xAuthorizationProvider] 
         * @param {string} [xAuthorizationContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeRequest(authorization?: string, xAuthorizationProvider?: string, xAuthorizationContext?: string, options?: any): AxiosPromise<AuthorizeRequest200Response> {
            return localVarFp.authorizeRequest(authorization, xAuthorizationProvider, xAuthorizationContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<string> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdAuthTokenRequestRequest} openIdAuthTokenRequestRequest Retrieve the authentication token from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdAuthTokenRequest(provider: string, openIdAuthTokenRequestRequest: OpenIdAuthTokenRequestRequest, options?: any): AxiosPromise<OpenIdAuthTokenRequest200Response> {
            return localVarFp.openIdAuthTokenRequest(provider, openIdAuthTokenRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} code Login code
         * @param {string} state Login state string
         * @param {string} [acrValues] 
         * @param {string} [scope] 
         * @param {string} [sessionState] 
         * @param {string} [sid] 
         * @param {string} [nonce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdAuthenticateResponse(provider: string, code: string, state: string, acrValues?: string, scope?: string, sessionState?: string, sid?: string, nonce?: string, options?: any): AxiosPromise<void> {
            return localVarFp.openIdAuthenticateResponse(provider, code, state, acrValues, scope, sessionState, sid, nonce, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLoginRequest(provider: string, appContext: string, options?: any): AxiosPromise<void> {
            return localVarFp.openIdLoginRequest(provider, appContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [idToken] id_token value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLogoutRequest(provider: string, appContext: string, idToken?: string, options?: any): AxiosPromise<void> {
            return localVarFp.openIdLogoutRequest(provider, appContext, idToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} [state] Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdLogoutResponse(provider: string, state?: string, options?: any): AxiosPromise<void> {
            return localVarFp.openIdLogoutResponse(provider, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIdUserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: any): AxiosPromise<OpenIdUserInfoRequest200Response> {
            return localVarFp.openIdUserInfoRequest(provider, openIdUserInfoRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root(options?: any): AxiosPromise<void> {
            return localVarFp.root(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2AuthenticateResponse(provider: string, options?: any): AxiosPromise<void> {
            return localVarFp.saml2AuthenticateResponse(provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {string} [provider2] Auth provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LoginRequest(provider: string, appContext: string, provider2?: string, options?: any): AxiosPromise<void> {
            return localVarFp.saml2LoginRequest(provider, appContext, provider2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutRequest(provider: string, appContext: string, options?: any): AxiosPromise<void> {
            return localVarFp.saml2LogoutRequest(provider, appContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutResponse(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: any): AxiosPromise<void> {
            return localVarFp.saml2LogoutResponse(provider, sAMLResponse, relayState, sigAlg, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {string} sAMLResponse Logout response
         * @param {string} relayState State string
         * @param {string} sigAlg SigAlg
         * @param {string} signature Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2LogoutResponse_1(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: any): AxiosPromise<void> {
            return localVarFp.saml2LogoutResponse_1(provider, sAMLResponse, relayState, sigAlg, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider Auth provider ident
         * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saml2UserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saml2UserInfoRequest(provider, openIdUserInfoRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swagger(options?: any): AxiosPromise<void> {
            return localVarFp.swagger(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} [authorization] 
     * @param {string} [xAuthorizationProvider] 
     * @param {string} [xAuthorizationContext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorizeRequest(authorization?: string, xAuthorizationProvider?: string, xAuthorizationContext?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorizeRequest(authorization, xAuthorizationProvider, xAuthorizationContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {OpenIdAuthTokenRequestRequest} openIdAuthTokenRequestRequest Retrieve the authentication token from the auth provider service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdAuthTokenRequest(provider: string, openIdAuthTokenRequestRequest: OpenIdAuthTokenRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdAuthTokenRequest(provider, openIdAuthTokenRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} code Login code
     * @param {string} state Login state string
     * @param {string} [acrValues] 
     * @param {string} [scope] 
     * @param {string} [sessionState] 
     * @param {string} [sid] 
     * @param {string} [nonce] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdAuthenticateResponse(provider: string, code: string, state: string, acrValues?: string, scope?: string, sessionState?: string, sid?: string, nonce?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdAuthenticateResponse(provider, code, state, acrValues, scope, sessionState, sid, nonce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdLoginRequest(provider: string, appContext: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdLoginRequest(provider, appContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
     * @param {string} [idToken] id_token value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdLogoutRequest(provider: string, appContext: string, idToken?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdLogoutRequest(provider, appContext, idToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} [state] Base64-encoded object with attributes: {appName: string, redirectUrl: string}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdLogoutResponse(provider: string, state?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdLogoutResponse(provider, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public openIdUserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).openIdUserInfoRequest(provider, openIdUserInfoRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public root(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).root(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2AuthenticateResponse(provider: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2AuthenticateResponse(provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
     * @param {string} [provider2] Auth provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2LoginRequest(provider: string, appContext: string, provider2?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2LoginRequest(provider, appContext, provider2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} appContext Base64-encoded object with attributes: {appName: string, redirectUrl: string}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2LogoutRequest(provider: string, appContext: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2LogoutRequest(provider, appContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} sAMLResponse Logout response
     * @param {string} relayState State string
     * @param {string} sigAlg SigAlg
     * @param {string} signature Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2LogoutResponse(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2LogoutResponse(provider, sAMLResponse, relayState, sigAlg, signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {string} sAMLResponse Logout response
     * @param {string} relayState State string
     * @param {string} sigAlg SigAlg
     * @param {string} signature Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2LogoutResponse_1(provider: string, sAMLResponse: string, relayState: string, sigAlg: string, signature: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2LogoutResponse_1(provider, sAMLResponse, relayState, sigAlg, signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider Auth provider ident
     * @param {OpenIdUserInfoRequestRequest} openIdUserInfoRequestRequest Retrieve user info from the auth provider service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saml2UserInfoRequest(provider: string, openIdUserInfoRequestRequest: OpenIdUserInfoRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saml2UserInfoRequest(provider, openIdUserInfoRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public swagger(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).swagger(options).then((request) => request(this.axios, this.basePath));
    }
}


